
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022a  00800060  00000bf8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea1  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000896  00000000  00000000  00001e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ad  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000848  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003ba9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 02 	jmp	0x454	; 0x454 <__ctors_end>
   4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
   8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
   c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  10:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  14:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  18:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  1c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  24:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  28:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  2c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  30:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  34:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  3c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  44:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  4c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>

00000054 <Eighty_One>:
	...
 2d4:	00 00 00 3f 01 01 01 01 01 01 01 01 01 3f 20 3f     ...?.........? ?
 2e4:	01 01 01 01 01 01 01 01 01 3f 20 3f 01 01 01 01     .........? ?....
 2f4:	01 01 01 01 01 3f 20 3f 01 01 01 01 01 01 01 01     .....? ?........
 304:	01 3f 20 3f 01 01 01 01 01 01 01 01 01 3f 20 3f     .? ?.........? ?
 314:	01 01 01 01 01 01 01 01 01 3f 20 3f 01 01 01 01     .........? ?....
 324:	01 01 01 01 01 3f 20 3f 01 01 01 01 01 01 01 01     .....? ?........
 334:	01 3f 20 3f 01 01 01 01 01 01 01 01 01 3f 20 3f     .? ?.........? ?
 344:	01 01 01 01 01 01 01 01 01 3f 20 20 00 00 00 00     .........?  ....
	...

00000454 <__ctors_end>:
 454:	11 24       	eor	r1, r1
 456:	1f be       	out	0x3f, r1	; 63
 458:	cf e5       	ldi	r28, 0x5F	; 95
 45a:	d8 e0       	ldi	r29, 0x08	; 8
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	cd bf       	out	0x3d, r28	; 61

00000460 <__do_copy_data>:
 460:	12 e0       	ldi	r17, 0x02	; 2
 462:	a0 e6       	ldi	r26, 0x60	; 96
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e8 ef       	ldi	r30, 0xF8	; 248
 468:	fb e0       	ldi	r31, 0x0B	; 11
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__do_copy_data+0x10>
 46c:	05 90       	lpm	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	aa 38       	cpi	r26, 0x8A	; 138
 472:	b1 07       	cpc	r27, r17
 474:	d9 f7       	brne	.-10     	; 0x46c <__do_copy_data+0xc>

00000476 <__do_clear_bss>:
 476:	22 e0       	ldi	r18, 0x02	; 2
 478:	aa e8       	ldi	r26, 0x8A	; 138
 47a:	b2 e0       	ldi	r27, 0x02	; 2
 47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
 47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
 480:	aa 38       	cpi	r26, 0x8A	; 138
 482:	b2 07       	cpc	r27, r18
 484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
 486:	0e 94 c4 04 	call	0x988	; 0x988 <main>
 48a:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

0000048e <__bad_interrupt>:
 48e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000492 <G_LCD>:


int G_LCD()
{
	
	GLCD_Init();
 492:	0e 94 7f 02 	call	0x4fe	; 0x4fe <GLCD_Init>
	GLCD_ClearAll();		
 496:	0e 94 a9 02 	call	0x552	; 0x552 <GLCD_ClearAll>
	
	int Duty_cycle = 90;
	
	
	GLCD_String_Letter(2,"Duty Cycle : 90 %");
 49a:	60 e4       	ldi	r22, 0x40	; 64
 49c:	72 e0       	ldi	r23, 0x02	; 2
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 c7 02 	call	0x58e	; 0x58e <GLCD_String_Letter>
	GLCD_String_Letter(3,"Frequency  : 00 KHZ");
 4a6:	62 e5       	ldi	r22, 0x52	; 82
 4a8:	72 e0       	ldi	r23, 0x02	; 2
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 c7 02 	call	0x58e	; 0x58e <GLCD_String_Letter>
		GLCD_ClearAll();
 4b2:	0e 94 a9 02 	call	0x552	; 0x552 <GLCD_ClearAll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b6:	2f eb       	ldi	r18, 0xBF	; 191
 4b8:	87 e2       	ldi	r24, 0x27	; 39
 4ba:	99 e0       	ldi	r25, 0x09	; 9
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <G_LCD+0x2a>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <G_LCD+0x34>
 4c6:	00 00       	nop
	_delay_ms(3000);
	GLCD_ClearAll();	
 4c8:	0e 94 a9 02 	call	0x552	; 0x552 <GLCD_ClearAll>
		GLCD_String_IMG(Seventy_One);
	}
	
	else if (Duty_cycle <= 90)
	{
		GLCD_String_IMG(Eighty_One);
 4cc:	84 e5       	ldi	r24, 0x54	; 84
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <GLCD_String_IMG>
	
	else if (Duty_cycle <= 100)
	{
		GLCD_String_IMG(Ninty_One);
	}
	GLCD_String_Letter(2,"LCD Graph For Given   Duty cycle :");
 4d4:	66 e6       	ldi	r22, 0x66	; 102
 4d6:	72 e0       	ldi	r23, 0x02	; 2
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 c7 02 	call	0x58e	; 0x58e <GLCD_String_Letter>
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <G_LCD+0x4e>

000004e2 <GLCD_Command>:
	GLCD_Command(0x3F);		/* Display ON */
}

void GLCD_Command(char Command)	
{
	Data_Port = Command;		/* Copy command on data pin */
 4e2:	8b bb       	out	0x1b, r24	; 27
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
 4e4:	a8 98       	cbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
 4e6:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
 4e8:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	8d e0       	ldi	r24, 0x0D	; 13
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <GLCD_Command+0xa>
 4f0:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 4f2:	aa 98       	cbi	0x15, 2	; 21
 4f4:	8d e0       	ldi	r24, 0x0D	; 13
 4f6:	8a 95       	dec	r24
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <GLCD_Command+0x14>
 4fa:	00 00       	nop
 4fc:	08 95       	ret

000004fe <GLCD_Init>:
#include "G_LCD_Config.h"


void GLCD_Init()
{
	Data_Port_Dir = 0xFF;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
 502:	84 bb       	out	0x14, r24	; 20
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
 504:	85 b3       	in	r24, 0x15	; 21
 506:	88 63       	ori	r24, 0x38	; 56
 508:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50a:	8f e3       	ldi	r24, 0x3F	; 63
 50c:	9c e9       	ldi	r25, 0x9C	; 156
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <GLCD_Init+0x10>
 512:	00 c0       	rjmp	.+0      	; 0x514 <GLCD_Init+0x16>
 514:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
 516:	8e e3       	ldi	r24, 0x3E	; 62
 518:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 51c:	80 e4       	ldi	r24, 0x40	; 64
 51e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 522:	88 eb       	ldi	r24, 0xB8	; 184
 524:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
 528:	80 ec       	ldi	r24, 0xC0	; 192
 52a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
 52e:	8f e3       	ldi	r24, 0x3F	; 63
 530:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
 534:	08 95       	ret

00000536 <GLCD_Data>:
	_delay_us(5);	
}

void GLCD_Data(char Data)
{
	Data_Port = Data;		/* Copy data on data pin */
 536:	8b bb       	out	0x1b, r24	; 27
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
 538:	a8 9a       	sbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
 53a:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
 53c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	8d e0       	ldi	r24, 0x0D	; 13
 540:	8a 95       	dec	r24
 542:	f1 f7       	brne	.-4      	; 0x540 <GLCD_Data+0xa>
 544:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 546:	aa 98       	cbi	0x15, 2	; 21
 548:	8d e0       	ldi	r24, 0x0D	; 13
 54a:	8a 95       	dec	r24
 54c:	f1 f7       	brne	.-4      	; 0x54a <GLCD_Data+0x14>
 54e:	00 00       	nop
 550:	08 95       	ret

00000552 <GLCD_ClearAll>:
	_delay_us(5);	
}

void GLCD_ClearAll()
{
 552:	1f 93       	push	r17
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
 558:	85 b3       	in	r24, 0x15	; 21
 55a:	88 61       	ori	r24, 0x18	; 24
 55c:	85 bb       	out	0x15, r24	; 21
 55e:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
 560:	81 2f       	mov	r24, r17
 562:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
 566:	c0 e4       	ldi	r28, 0x40	; 64
 568:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 9b 02 	call	0x536	; 0x536 <GLCD_Data>
 570:	21 97       	sbiw	r28, 0x01	; 1
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
 572:	d9 f7       	brne	.-10     	; 0x56a <GLCD_ClearAll+0x18>
 574:	1f 5f       	subi	r17, 0xFF	; 255
void GLCD_ClearAll()
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 576:	10 3c       	cpi	r17, 0xC0	; 192
 578:	99 f7       	brne	.-26     	; 0x560 <GLCD_ClearAll+0xe>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 57a:	80 e4       	ldi	r24, 0x40	; 64
 57c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 580:	88 eb       	ldi	r24, 0xB8	; 184
 582:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	08 95       	ret

0000058e <GLCD_String_Letter>:

void GLCD_String_Letter(char page_no, char *str)
{
 58e:	2f 92       	push	r2
 590:	3f 92       	push	r3
 592:	4f 92       	push	r4
 594:	5f 92       	push	r5
 596:	6f 92       	push	r6
 598:	7f 92       	push	r7
 59a:	8f 92       	push	r8
 59c:	9f 92       	push	r9
 59e:	af 92       	push	r10
 5a0:	bf 92       	push	r11
 5a2:	cf 92       	push	r12
 5a4:	df 92       	push	r13
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <GLCD_String_Letter+0x26>
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <GLCD_String_Letter+0x28>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <GLCD_String_Letter+0x2a>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	8b 01       	movw	r16, r22
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
 5be:	e8 2e       	mov	r14, r24
 5c0:	f1 2c       	mov	r15, r1
 5c2:	c7 01       	movw	r24, r14
 5c4:	88 54       	subi	r24, 0x48	; 72
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
 5cc:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
 5ce:	ac 98       	cbi	0x15, 4	; 21
	
	GLCD_Command(Page);
 5d0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
 5d4:	f8 01       	movw	r30, r16
 5d6:	90 81       	ld	r25, Z
 5d8:	99 23       	and	r25, r25
 5da:	09 f4       	brne	.+2      	; 0x5de <GLCD_String_Letter+0x50>
 5dc:	59 c1       	rjmp	.+690    	; 0x890 <__stack+0x31>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
 5de:	22 24       	eor	r2, r2
 5e0:	33 24       	eor	r3, r3
 5e2:	2e 18       	sub	r2, r14
 5e4:	3f 08       	sbc	r3, r15
 5e6:	36 94       	lsr	r3
 5e8:	32 2c       	mov	r3, r2
 5ea:	22 24       	eor	r2, r2
 5ec:	37 94       	ror	r3
 5ee:	27 94       	ror	r2
 5f0:	f5 e0       	ldi	r31, 0x05	; 5
 5f2:	2f 1a       	sub	r2, r31
 5f4:	fc ef       	ldi	r31, 0xFC	; 252
 5f6:	3f 0a       	sbc	r3, r31
void GLCD_String_Letter(char page_no, char *str)
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
 5f8:	61 2c       	mov	r6, r1
 5fa:	51 2c       	mov	r5, r1
 5fc:	41 2c       	mov	r4, r1
 5fe:	0f 2e       	mov	r0, r31
 600:	ff e3       	ldi	r31, 0x3F	; 63
 602:	7f 2e       	mov	r7, r31
 604:	f0 2d       	mov	r31, r0

void GLCD_String_Letter(char page_no, char *str)
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
 606:	e1 2c       	mov	r14, r1
 608:	f1 2c       	mov	r15, r1
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
					Command_Port ^= (1 << CS2);
					GLCD_Command(Page + Page_inc);
 60a:	49 81       	ldd	r20, Y+1	; 0x01
 60c:	5a 81       	ldd	r21, Y+2	; 0x02
 60e:	9a 01       	movw	r18, r20
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	29 83       	std	Y+1, r18	; 0x01
 616:	3a 83       	std	Y+2, r19	; 0x02
 618:	4b 83       	std	Y+3, r20	; 0x03
 61a:	5c 83       	std	Y+4, r21	; 0x04
 61c:	04 c0       	rjmp	.+8      	; 0x626 <GLCD_String_Letter+0x98>
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
 61e:	2e 14       	cp	r2, r14
 620:	3f 04       	cpc	r3, r15
 622:	08 f4       	brcc	.+2      	; 0x626 <GLCD_String_Letter+0x98>
 624:	35 c1       	rjmp	.+618    	; 0x890 <__stack+0x31>
		break;
		if (str[i]!=32)
 626:	90 32       	cpi	r25, 0x20	; 32
 628:	09 f4       	brne	.+2      	; 0x62c <GLCD_String_Letter+0x9e>
 62a:	4f c0       	rjmp	.+158    	; 0x6ca <GLCD_String_Letter+0x13c>
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	9e 83       	std	Y+6, r25	; 0x06
 632:	8d 83       	std	Y+5, r24	; 0x05
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
 634:	cd 80       	ldd	r12, Y+5	; 0x05
 636:	de 80       	ldd	r13, Y+6	; 0x06
 638:	ce 0c       	add	r12, r14
 63a:	df 1c       	adc	r13, r15
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	5f e3       	ldi	r21, 0x3F	; 63
 644:	66 2d       	mov	r22, r6
 646:	75 2d       	mov	r23, r5
 648:	84 2d       	mov	r24, r4
 64a:	97 2d       	mov	r25, r7
 64c:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 650:	a6 2e       	mov	r10, r22
 652:	b7 2e       	mov	r11, r23
 654:	98 2e       	mov	r9, r24
 656:	89 2e       	mov	r8, r25
 658:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fixsfsi>
 65c:	76 95       	lsr	r23
 65e:	76 2f       	mov	r23, r22
 660:	66 27       	eor	r22, r22
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	c6 16       	cp	r12, r22
 668:	d7 06       	cpc	r13, r23
 66a:	29 f5       	brne	.+74     	; 0x6b6 <GLCD_String_Letter+0x128>
				{
					if (column == FontWidth)
 66c:	ed 81       	ldd	r30, Y+5	; 0x05
 66e:	fe 81       	ldd	r31, Y+6	; 0x06
 670:	35 97       	sbiw	r30, 0x05	; 5
 672:	59 f1       	breq	.+86     	; 0x6ca <GLCD_String_Letter+0x13c>
					break;
					GLCD_Command(0x40);
 674:	80 e4       	ldi	r24, 0x40	; 64
 676:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
 67a:	85 b3       	in	r24, 0x15	; 21
 67c:	f8 e0       	ldi	r31, 0x08	; 8
 67e:	8f 27       	eor	r24, r31
 680:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 682:	85 b3       	in	r24, 0x15	; 21
 684:	20 e1       	ldi	r18, 0x10	; 16
 686:	82 27       	eor	r24, r18
 688:	85 bb       	out	0x15, r24	; 21
					GLCD_Command(Page + Page_inc);
 68a:	69 81       	ldd	r22, Y+1	; 0x01
 68c:	7a 81       	ldd	r23, Y+2	; 0x02
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	9c 81       	ldd	r25, Y+4	; 0x04
 692:	0e 94 6c 05 	call	0xad8	; 0xad8 <__floatunsisf>
 696:	26 2d       	mov	r18, r6
 698:	35 2d       	mov	r19, r5
 69a:	44 2d       	mov	r20, r4
 69c:	57 2d       	mov	r21, r7
 69e:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 6a2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 6a6:	86 2f       	mov	r24, r22
 6a8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 6ac:	6a 2c       	mov	r6, r10
 6ae:	5b 2c       	mov	r5, r11
 6b0:	49 2c       	mov	r4, r9
 6b2:	78 2c       	mov	r7, r8
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
				{
					if (column == FontWidth)
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
 6b4:	76 01       	movw	r14, r12
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
 6b6:	4d 81       	ldd	r20, Y+5	; 0x05
 6b8:	5e 81       	ldd	r21, Y+6	; 0x06
 6ba:	4f 5f       	subi	r20, 0xFF	; 255
 6bc:	5f 4f       	sbci	r21, 0xFF	; 255
 6be:	5e 83       	std	Y+6, r21	; 0x06
 6c0:	4d 83       	std	Y+5, r20	; 0x05
 6c2:	46 30       	cpi	r20, 0x06	; 6
 6c4:	51 05       	cpc	r21, r1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <GLCD_String_Letter+0x13c>
 6c8:	b5 cf       	rjmp	.-150    	; 0x634 <GLCD_String_Letter+0xa6>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
 6ca:	2e 14       	cp	r2, r14
 6cc:	3f 04       	cpc	r3, r15
 6ce:	08 f4       	brcc	.+2      	; 0x6d2 <GLCD_String_Letter+0x144>
 6d0:	df c0       	rjmp	.+446    	; 0x890 <__stack+0x31>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
 6d2:	f8 01       	movw	r30, r16
 6d4:	80 81       	ld	r24, Z
 6d6:	80 32       	cpi	r24, 0x20	; 32
 6d8:	09 f0       	breq	.+2      	; 0x6dc <GLCD_String_Letter+0x14e>
 6da:	53 c0       	rjmp	.+166    	; 0x782 <GLCD_String_Letter+0x1f4>
 6dc:	67 01       	movw	r12, r14
 6de:	1e 82       	std	Y+6, r1	; 0x06
 6e0:	1d 82       	std	Y+5, r1	; 0x05
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 6e2:	f8 01       	movw	r30, r16
 6e4:	80 81       	ld	r24, Z
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	80 97       	sbiw	r24, 0x20	; 32
 6ea:	9c 01       	movw	r18, r24
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	f9 01       	movw	r30, r18
 6f6:	e8 0f       	add	r30, r24
 6f8:	f9 1f       	adc	r31, r25
 6fa:	e0 5a       	subi	r30, 0xA0	; 160
 6fc:	ff 4f       	sbci	r31, 0xFF	; 255
 6fe:	2d 81       	ldd	r18, Y+5	; 0x05
 700:	3e 81       	ldd	r19, Y+6	; 0x06
 702:	e2 0f       	add	r30, r18
 704:	f3 1f       	adc	r31, r19
 706:	80 81       	ld	r24, Z
 708:	0e 94 9b 02 	call	0x536	; 0x536 <GLCD_Data>
				if((Y_address+1)%64==0)
 70c:	3f ef       	ldi	r19, 0xFF	; 255
 70e:	c3 1a       	sub	r12, r19
 710:	d3 0a       	sbc	r13, r19
 712:	c6 01       	movw	r24, r12
 714:	8f 73       	andi	r24, 0x3F	; 63
 716:	99 27       	eor	r25, r25
 718:	89 2b       	or	r24, r25
 71a:	39 f5       	brne	.+78     	; 0x76a <GLCD_String_Letter+0x1dc>
				{
					Command_Port ^= (1 << CS1);
 71c:	85 b3       	in	r24, 0x15	; 21
 71e:	48 e0       	ldi	r20, 0x08	; 8
 720:	84 27       	eor	r24, r20
 722:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 724:	85 b3       	in	r24, 0x15	; 21
 726:	50 e1       	ldi	r21, 0x10	; 16
 728:	85 27       	eor	r24, r21
 72a:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));
 72c:	69 81       	ldd	r22, Y+1	; 0x01
 72e:	7a 81       	ldd	r23, Y+2	; 0x02
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	9c 81       	ldd	r25, Y+4	; 0x04
 734:	0e 94 6c 05 	call	0xad8	; 0xad8 <__floatunsisf>
 738:	26 2d       	mov	r18, r6
 73a:	35 2d       	mov	r19, r5
 73c:	44 2d       	mov	r20, r4
 73e:	57 2d       	mov	r21, r7
 740:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 744:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 748:	86 2f       	mov	r24, r22
 74a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	5f e3       	ldi	r21, 0x3F	; 63
 756:	66 2d       	mov	r22, r6
 758:	75 2d       	mov	r23, r5
 75a:	84 2d       	mov	r24, r4
 75c:	97 2d       	mov	r25, r7
 75e:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 762:	66 2e       	mov	r6, r22
 764:	57 2e       	mov	r5, r23
 766:	48 2e       	mov	r4, r24
 768:	79 2e       	mov	r7, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
 76a:	8d 81       	ldd	r24, Y+5	; 0x05
 76c:	9e 81       	ldd	r25, Y+6	; 0x06
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	9e 83       	std	Y+6, r25	; 0x06
 772:	8d 83       	std	Y+5, r24	; 0x05
 774:	05 97       	sbiw	r24, 0x05	; 5
 776:	09 f0       	breq	.+2      	; 0x77a <GLCD_String_Letter+0x1ec>
 778:	b4 cf       	rjmp	.-152    	; 0x6e2 <GLCD_String_Letter+0x154>
 77a:	95 e0       	ldi	r25, 0x05	; 5
 77c:	e9 0e       	add	r14, r25
 77e:	f1 1c       	adc	r15, r1
 780:	81 c0       	rjmp	.+258    	; 0x884 <__stack+0x25>
 782:	67 01       	movw	r12, r14
 784:	1e 82       	std	Y+6, r1	; 0x06
 786:	1d 82       	std	Y+5, r1	; 0x05
		}
		else
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 788:	f8 01       	movw	r30, r16
 78a:	80 81       	ld	r24, Z
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	80 97       	sbiw	r24, 0x20	; 32
 790:	9c 01       	movw	r18, r24
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	f9 01       	movw	r30, r18
 79c:	e8 0f       	add	r30, r24
 79e:	f9 1f       	adc	r31, r25
 7a0:	e0 5a       	subi	r30, 0xA0	; 160
 7a2:	ff 4f       	sbci	r31, 0xFF	; 255
 7a4:	2d 81       	ldd	r18, Y+5	; 0x05
 7a6:	3e 81       	ldd	r19, Y+6	; 0x06
 7a8:	e2 0f       	add	r30, r18
 7aa:	f3 1f       	adc	r31, r19
 7ac:	80 81       	ld	r24, Z
 7ae:	0e 94 9b 02 	call	0x536	; 0x536 <GLCD_Data>
				if((Y_address+1)%64==0)
 7b2:	3f ef       	ldi	r19, 0xFF	; 255
 7b4:	c3 1a       	sub	r12, r19
 7b6:	d3 0a       	sbc	r13, r19
 7b8:	c6 01       	movw	r24, r12
 7ba:	8f 73       	andi	r24, 0x3F	; 63
 7bc:	99 27       	eor	r25, r25
 7be:	89 2b       	or	r24, r25
 7c0:	39 f5       	brne	.+78     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
				{
					Command_Port ^= (1 << CS1);
 7c2:	85 b3       	in	r24, 0x15	; 21
 7c4:	48 e0       	ldi	r20, 0x08	; 8
 7c6:	84 27       	eor	r24, r20
 7c8:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 7ca:	85 b3       	in	r24, 0x15	; 21
 7cc:	50 e1       	ldi	r21, 0x10	; 16
 7ce:	85 27       	eor	r24, r21
 7d0:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));
 7d2:	69 81       	ldd	r22, Y+1	; 0x01
 7d4:	7a 81       	ldd	r23, Y+2	; 0x02
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	9c 81       	ldd	r25, Y+4	; 0x04
 7da:	0e 94 6c 05 	call	0xad8	; 0xad8 <__floatunsisf>
 7de:	26 2d       	mov	r18, r6
 7e0:	35 2d       	mov	r19, r5
 7e2:	44 2d       	mov	r20, r4
 7e4:	57 2d       	mov	r21, r7
 7e6:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 7ea:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 7ee:	86 2f       	mov	r24, r22
 7f0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 7f4:	20 e0       	ldi	r18, 0x00	; 0
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	5f e3       	ldi	r21, 0x3F	; 63
 7fc:	66 2d       	mov	r22, r6
 7fe:	75 2d       	mov	r23, r5
 800:	84 2d       	mov	r24, r4
 802:	97 2d       	mov	r25, r7
 804:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 808:	66 2e       	mov	r6, r22
 80a:	57 2e       	mov	r5, r23
 80c:	48 2e       	mov	r4, r24
 80e:	79 2e       	mov	r7, r25
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
 810:	8d 81       	ldd	r24, Y+5	; 0x05
 812:	9e 81       	ldd	r25, Y+6	; 0x06
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	9e 83       	std	Y+6, r25	; 0x06
 818:	8d 83       	std	Y+5, r24	; 0x05
 81a:	05 97       	sbiw	r24, 0x05	; 5
 81c:	09 f0       	breq	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81e:	b4 cf       	rjmp	.-152    	; 0x788 <GLCD_String_Letter+0x1fa>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	0e 94 9b 02 	call	0x536	; 0x536 <GLCD_Data>
			Y_address++;
 826:	96 e0       	ldi	r25, 0x06	; 6
 828:	e9 0e       	add	r14, r25
 82a:	f1 1c       	adc	r15, r1
			if((Y_address)%64 == 0)
 82c:	c7 01       	movw	r24, r14
 82e:	8f 73       	andi	r24, 0x3F	; 63
 830:	99 27       	eor	r25, r25
 832:	89 2b       	or	r24, r25
 834:	39 f5       	brne	.+78     	; 0x884 <__stack+0x25>
			{
				Command_Port ^= (1 << CS1);
 836:	85 b3       	in	r24, 0x15	; 21
 838:	e8 e0       	ldi	r30, 0x08	; 8
 83a:	8e 27       	eor	r24, r30
 83c:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
 83e:	85 b3       	in	r24, 0x15	; 21
 840:	f0 e1       	ldi	r31, 0x10	; 16
 842:	8f 27       	eor	r24, r31
 844:	85 bb       	out	0x15, r24	; 21
				GLCD_Command((Page+Page_inc));
 846:	69 81       	ldd	r22, Y+1	; 0x01
 848:	7a 81       	ldd	r23, Y+2	; 0x02
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	0e 94 6c 05 	call	0xad8	; 0xad8 <__floatunsisf>
 852:	26 2d       	mov	r18, r6
 854:	35 2d       	mov	r19, r5
 856:	44 2d       	mov	r20, r4
 858:	57 2d       	mov	r21, r7
 85a:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 85e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 862:	86 2f       	mov	r24, r22
 864:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
				Page_inc = Page_inc + 0.5;
 868:	20 e0       	ldi	r18, 0x00	; 0
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	40 e0       	ldi	r20, 0x00	; 0
 86e:	5f e3       	ldi	r21, 0x3F	; 63
 870:	66 2d       	mov	r22, r6
 872:	75 2d       	mov	r23, r5
 874:	84 2d       	mov	r24, r4
 876:	97 2d       	mov	r25, r7
 878:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 87c:	66 2e       	mov	r6, r22
 87e:	57 2e       	mov	r5, r23
 880:	48 2e       	mov	r4, r24
 882:	79 2e       	mov	r7, r25
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
 884:	0f 5f       	subi	r16, 0xFF	; 255
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	f8 01       	movw	r30, r16
 88a:	90 81       	ld	r25, Z
 88c:	91 11       	cpse	r25, r1
 88e:	c7 ce       	rjmp	.-626    	; 0x61e <GLCD_String_Letter+0x90>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
 890:	80 e4       	ldi	r24, 0x40	; 64
 892:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
}
 896:	26 96       	adiw	r28, 0x06	; 6
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	f8 94       	cli
 89c:	de bf       	out	0x3e, r29	; 62
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	cd bf       	out	0x3d, r28	; 61
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	bf 90       	pop	r11
 8b4:	af 90       	pop	r10
 8b6:	9f 90       	pop	r9
 8b8:	8f 90       	pop	r8
 8ba:	7f 90       	pop	r7
 8bc:	6f 90       	pop	r6
 8be:	5f 90       	pop	r5
 8c0:	4f 90       	pop	r4
 8c2:	3f 90       	pop	r3
 8c4:	2f 90       	pop	r2
 8c6:	08 95       	ret

000008c8 <GLCD_String_IMG>:

void GLCD_String_IMG(const char* image)	
{
 8c8:	8f 92       	push	r8
 8ca:	9f 92       	push	r9
 8cc:	af 92       	push	r10
 8ce:	bf 92       	push	r11
 8d0:	cf 92       	push	r12
 8d2:	df 92       	push	r13
 8d4:	ef 92       	push	r14
 8d6:	ff 92       	push	r15
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
	int column,page,page_add=0xB8,k=0;
	float page_inc=0.5;
	char byte;

	Command_Port |= (1 << CS1);		/* Select first Left half of display */
 8e0:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
 8e2:	ac 98       	cbi	0x15, 4	; 21
 8e4:	ec 01       	movw	r28, r24
 8e6:	7c 01       	movw	r14, r24
 8e8:	2c ef       	ldi	r18, 0xFC	; 252
 8ea:	f2 1a       	sub	r15, r18
}

void GLCD_String_IMG(const char* image)	
{
	int column,page,page_add=0xB8,k=0;
	float page_inc=0.5;
 8ec:	0f 2e       	mov	r0, r31
 8ee:	81 2c       	mov	r8, r1
 8f0:	91 2c       	mov	r9, r1
 8f2:	a1 2c       	mov	r10, r1
 8f4:	ff e3       	ldi	r31, 0x3F	; 63
 8f6:	bf 2e       	mov	r11, r31
 8f8:	f0 2d       	mov	r31, r0
 

			byte = pgm_read_byte(&image[k+column]);
			GLCD_Data(byte);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
 8fa:	68 94       	set
 8fc:	cc 24       	eor	r12, r12
 8fe:	c3 f8       	bld	r12, 3
		Command_Port ^= (1 << CS2);
 900:	68 94       	set
 902:	dd 24       	eor	r13, r13
 904:	d4 f8       	bld	r13, 4
 906:	29 c0       	rjmp	.+82     	; 0x95a <GLCD_String_IMG+0x92>
	{
		for(column=0;column<64;column++)
		{
 

			byte = pgm_read_byte(&image[k+column]);
 908:	fe 01       	movw	r30, r28
 90a:	84 91       	lpm	r24, Z
			GLCD_Data(byte);		/* Print 64 column of each page */
 90c:	0e 94 9b 02 	call	0x536	; 0x536 <GLCD_Data>
 910:	21 96       	adiw	r28, 0x01	; 1
	Command_Port |= (1 << CS1);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);
	
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
	{
		for(column=0;column<64;column++)
 912:	c0 17       	cp	r28, r16
 914:	d1 07       	cpc	r29, r17
 916:	c1 f7       	brne	.-16     	; 0x908 <GLCD_String_IMG+0x40>
 

			byte = pgm_read_byte(&image[k+column]);
			GLCD_Data(byte);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
 918:	85 b3       	in	r24, 0x15	; 21
 91a:	8c 25       	eor	r24, r12
 91c:	85 bb       	out	0x15, r24	; 21
		Command_Port ^= (1 << CS2);
 91e:	85 b3       	in	r24, 0x15	; 21
 920:	8d 25       	eor	r24, r13
 922:	85 bb       	out	0x15, r24	; 21
		GLCD_Command((page_add+page_inc));/* Increment page address */
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	48 e3       	ldi	r20, 0x38	; 56
 92a:	53 e4       	ldi	r21, 0x43	; 67
 92c:	c5 01       	movw	r24, r10
 92e:	b4 01       	movw	r22, r8
 930:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 934:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 938:	86 2f       	mov	r24, r22
 93a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
		page_inc=page_inc+0.5;
 93e:	20 e0       	ldi	r18, 0x00	; 0
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	40 e0       	ldi	r20, 0x00	; 0
 944:	5f e3       	ldi	r21, 0x3F	; 63
 946:	c5 01       	movw	r24, r10
 948:	b4 01       	movw	r22, r8
 94a:	0e 94 ca 04 	call	0x994	; 0x994 <__addsf3>
 94e:	4b 01       	movw	r8, r22
 950:	5c 01       	movw	r10, r24
 952:	e8 01       	movw	r28, r16
	char byte;

	Command_Port |= (1 << CS1);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);
	
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
 954:	0e 15       	cp	r16, r14
 956:	1f 05       	cpc	r17, r15
 958:	21 f0       	breq	.+8      	; 0x962 <GLCD_String_IMG+0x9a>
 95a:	8e 01       	movw	r16, r28
 95c:	00 5c       	subi	r16, 0xC0	; 192
 95e:	1f 4f       	sbci	r17, 0xFF	; 255
 960:	d3 cf       	rjmp	.-90     	; 0x908 <GLCD_String_IMG+0x40>
		Command_Port ^= (1 << CS2);
		GLCD_Command((page_add+page_inc));/* Increment page address */
		page_inc=page_inc+0.5;
		k=k+64;						/* Increment pointer */
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
 962:	80 e4       	ldi	r24, 0x40	; 64
 964:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
 968:	88 eb       	ldi	r24, 0xB8	; 184
 96a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <GLCD_Command>
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	ff 90       	pop	r15
 978:	ef 90       	pop	r14
 97a:	df 90       	pop	r13
 97c:	cf 90       	pop	r12
 97e:	bf 90       	pop	r11
 980:	af 90       	pop	r10
 982:	9f 90       	pop	r9
 984:	8f 90       	pop	r8
 986:	08 95       	ret

00000988 <main>:


int main(void)
{
    
	G_LCD();
 988:	0e 94 49 02 	call	0x492	; 0x492 <G_LCD>

}
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	08 95       	ret

00000992 <__subsf3>:
 992:	50 58       	subi	r21, 0x80	; 128

00000994 <__addsf3>:
 994:	bb 27       	eor	r27, r27
 996:	aa 27       	eor	r26, r26
 998:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__addsf3x>
 99c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_round>
 9a0:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscA>
 9a4:	38 f0       	brcs	.+14     	; 0x9b4 <__addsf3+0x20>
 9a6:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_pscB>
 9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__addsf3+0x20>
 9ac:	39 f4       	brne	.+14     	; 0x9bc <__addsf3+0x28>
 9ae:	9f 3f       	cpi	r25, 0xFF	; 255
 9b0:	19 f4       	brne	.+6      	; 0x9b8 <__addsf3+0x24>
 9b2:	26 f4       	brtc	.+8      	; 0x9bc <__addsf3+0x28>
 9b4:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_nan>
 9b8:	0e f4       	brtc	.+2      	; 0x9bc <__addsf3+0x28>
 9ba:	e0 95       	com	r30
 9bc:	e7 fb       	bst	r30, 7
 9be:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__fp_inf>

000009c2 <__addsf3x>:
 9c2:	e9 2f       	mov	r30, r25
 9c4:	0e 94 d1 05 	call	0xba2	; 0xba2 <__fp_split3>
 9c8:	58 f3       	brcs	.-42     	; 0x9a0 <__addsf3+0xc>
 9ca:	ba 17       	cp	r27, r26
 9cc:	62 07       	cpc	r22, r18
 9ce:	73 07       	cpc	r23, r19
 9d0:	84 07       	cpc	r24, r20
 9d2:	95 07       	cpc	r25, r21
 9d4:	20 f0       	brcs	.+8      	; 0x9de <__addsf3x+0x1c>
 9d6:	79 f4       	brne	.+30     	; 0x9f6 <__addsf3x+0x34>
 9d8:	a6 f5       	brtc	.+104    	; 0xa42 <__addsf3x+0x80>
 9da:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_zero>
 9de:	0e f4       	brtc	.+2      	; 0x9e2 <__addsf3x+0x20>
 9e0:	e0 95       	com	r30
 9e2:	0b 2e       	mov	r0, r27
 9e4:	ba 2f       	mov	r27, r26
 9e6:	a0 2d       	mov	r26, r0
 9e8:	0b 01       	movw	r0, r22
 9ea:	b9 01       	movw	r22, r18
 9ec:	90 01       	movw	r18, r0
 9ee:	0c 01       	movw	r0, r24
 9f0:	ca 01       	movw	r24, r20
 9f2:	a0 01       	movw	r20, r0
 9f4:	11 24       	eor	r1, r1
 9f6:	ff 27       	eor	r31, r31
 9f8:	59 1b       	sub	r21, r25
 9fa:	99 f0       	breq	.+38     	; 0xa22 <__addsf3x+0x60>
 9fc:	59 3f       	cpi	r21, 0xF9	; 249
 9fe:	50 f4       	brcc	.+20     	; 0xa14 <__addsf3x+0x52>
 a00:	50 3e       	cpi	r21, 0xE0	; 224
 a02:	68 f1       	brcs	.+90     	; 0xa5e <__addsf3x+0x9c>
 a04:	1a 16       	cp	r1, r26
 a06:	f0 40       	sbci	r31, 0x00	; 0
 a08:	a2 2f       	mov	r26, r18
 a0a:	23 2f       	mov	r18, r19
 a0c:	34 2f       	mov	r19, r20
 a0e:	44 27       	eor	r20, r20
 a10:	58 5f       	subi	r21, 0xF8	; 248
 a12:	f3 cf       	rjmp	.-26     	; 0x9fa <__addsf3x+0x38>
 a14:	46 95       	lsr	r20
 a16:	37 95       	ror	r19
 a18:	27 95       	ror	r18
 a1a:	a7 95       	ror	r26
 a1c:	f0 40       	sbci	r31, 0x00	; 0
 a1e:	53 95       	inc	r21
 a20:	c9 f7       	brne	.-14     	; 0xa14 <__addsf3x+0x52>
 a22:	7e f4       	brtc	.+30     	; 0xa42 <__addsf3x+0x80>
 a24:	1f 16       	cp	r1, r31
 a26:	ba 0b       	sbc	r27, r26
 a28:	62 0b       	sbc	r22, r18
 a2a:	73 0b       	sbc	r23, r19
 a2c:	84 0b       	sbc	r24, r20
 a2e:	ba f0       	brmi	.+46     	; 0xa5e <__addsf3x+0x9c>
 a30:	91 50       	subi	r25, 0x01	; 1
 a32:	a1 f0       	breq	.+40     	; 0xa5c <__addsf3x+0x9a>
 a34:	ff 0f       	add	r31, r31
 a36:	bb 1f       	adc	r27, r27
 a38:	66 1f       	adc	r22, r22
 a3a:	77 1f       	adc	r23, r23
 a3c:	88 1f       	adc	r24, r24
 a3e:	c2 f7       	brpl	.-16     	; 0xa30 <__addsf3x+0x6e>
 a40:	0e c0       	rjmp	.+28     	; 0xa5e <__addsf3x+0x9c>
 a42:	ba 0f       	add	r27, r26
 a44:	62 1f       	adc	r22, r18
 a46:	73 1f       	adc	r23, r19
 a48:	84 1f       	adc	r24, r20
 a4a:	48 f4       	brcc	.+18     	; 0xa5e <__addsf3x+0x9c>
 a4c:	87 95       	ror	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b7 95       	ror	r27
 a54:	f7 95       	ror	r31
 a56:	9e 3f       	cpi	r25, 0xFE	; 254
 a58:	08 f0       	brcs	.+2      	; 0xa5c <__addsf3x+0x9a>
 a5a:	b0 cf       	rjmp	.-160    	; 0x9bc <__addsf3+0x28>
 a5c:	93 95       	inc	r25
 a5e:	88 0f       	add	r24, r24
 a60:	08 f0       	brcs	.+2      	; 0xa64 <__addsf3x+0xa2>
 a62:	99 27       	eor	r25, r25
 a64:	ee 0f       	add	r30, r30
 a66:	97 95       	ror	r25
 a68:	87 95       	ror	r24
 a6a:	08 95       	ret

00000a6c <__fixsfsi>:
 a6c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fixunssfsi>
 a70:	68 94       	set
 a72:	b1 11       	cpse	r27, r1
 a74:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_szero>
 a78:	08 95       	ret

00000a7a <__fixunssfsi>:
 a7a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_splitA>
 a7e:	88 f0       	brcs	.+34     	; 0xaa2 <__fixunssfsi+0x28>
 a80:	9f 57       	subi	r25, 0x7F	; 127
 a82:	98 f0       	brcs	.+38     	; 0xaaa <__fixunssfsi+0x30>
 a84:	b9 2f       	mov	r27, r25
 a86:	99 27       	eor	r25, r25
 a88:	b7 51       	subi	r27, 0x17	; 23
 a8a:	b0 f0       	brcs	.+44     	; 0xab8 <__fixunssfsi+0x3e>
 a8c:	e1 f0       	breq	.+56     	; 0xac6 <__fixunssfsi+0x4c>
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	1a f0       	brmi	.+6      	; 0xa9e <__fixunssfsi+0x24>
 a98:	ba 95       	dec	r27
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <__fixunssfsi+0x14>
 a9c:	14 c0       	rjmp	.+40     	; 0xac6 <__fixunssfsi+0x4c>
 a9e:	b1 30       	cpi	r27, 0x01	; 1
 aa0:	91 f0       	breq	.+36     	; 0xac6 <__fixunssfsi+0x4c>
 aa2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_zero>
 aa6:	b1 e0       	ldi	r27, 0x01	; 1
 aa8:	08 95       	ret
 aaa:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_zero>
 aae:	67 2f       	mov	r22, r23
 ab0:	78 2f       	mov	r23, r24
 ab2:	88 27       	eor	r24, r24
 ab4:	b8 5f       	subi	r27, 0xF8	; 248
 ab6:	39 f0       	breq	.+14     	; 0xac6 <__fixunssfsi+0x4c>
 ab8:	b9 3f       	cpi	r27, 0xF9	; 249
 aba:	cc f3       	brlt	.-14     	; 0xaae <__fixunssfsi+0x34>
 abc:	86 95       	lsr	r24
 abe:	77 95       	ror	r23
 ac0:	67 95       	ror	r22
 ac2:	b3 95       	inc	r27
 ac4:	d9 f7       	brne	.-10     	; 0xabc <__fixunssfsi+0x42>
 ac6:	3e f4       	brtc	.+14     	; 0xad6 <__fixunssfsi+0x5c>
 ac8:	90 95       	com	r25
 aca:	80 95       	com	r24
 acc:	70 95       	com	r23
 ace:	61 95       	neg	r22
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255
 ad2:	8f 4f       	sbci	r24, 0xFF	; 255
 ad4:	9f 4f       	sbci	r25, 0xFF	; 255
 ad6:	08 95       	ret

00000ad8 <__floatunsisf>:
 ad8:	e8 94       	clt
 ada:	09 c0       	rjmp	.+18     	; 0xaee <__floatsisf+0x12>

00000adc <__floatsisf>:
 adc:	97 fb       	bst	r25, 7
 ade:	3e f4       	brtc	.+14     	; 0xaee <__floatsisf+0x12>
 ae0:	90 95       	com	r25
 ae2:	80 95       	com	r24
 ae4:	70 95       	com	r23
 ae6:	61 95       	neg	r22
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	99 23       	and	r25, r25
 af0:	a9 f0       	breq	.+42     	; 0xb1c <__floatsisf+0x40>
 af2:	f9 2f       	mov	r31, r25
 af4:	96 e9       	ldi	r25, 0x96	; 150
 af6:	bb 27       	eor	r27, r27
 af8:	93 95       	inc	r25
 afa:	f6 95       	lsr	r31
 afc:	87 95       	ror	r24
 afe:	77 95       	ror	r23
 b00:	67 95       	ror	r22
 b02:	b7 95       	ror	r27
 b04:	f1 11       	cpse	r31, r1
 b06:	f8 cf       	rjmp	.-16     	; 0xaf8 <__floatsisf+0x1c>
 b08:	fa f4       	brpl	.+62     	; 0xb48 <__floatsisf+0x6c>
 b0a:	bb 0f       	add	r27, r27
 b0c:	11 f4       	brne	.+4      	; 0xb12 <__floatsisf+0x36>
 b0e:	60 ff       	sbrs	r22, 0
 b10:	1b c0       	rjmp	.+54     	; 0xb48 <__floatsisf+0x6c>
 b12:	6f 5f       	subi	r22, 0xFF	; 255
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	16 c0       	rjmp	.+44     	; 0xb48 <__floatsisf+0x6c>
 b1c:	88 23       	and	r24, r24
 b1e:	11 f0       	breq	.+4      	; 0xb24 <__floatsisf+0x48>
 b20:	96 e9       	ldi	r25, 0x96	; 150
 b22:	11 c0       	rjmp	.+34     	; 0xb46 <__floatsisf+0x6a>
 b24:	77 23       	and	r23, r23
 b26:	21 f0       	breq	.+8      	; 0xb30 <__floatsisf+0x54>
 b28:	9e e8       	ldi	r25, 0x8E	; 142
 b2a:	87 2f       	mov	r24, r23
 b2c:	76 2f       	mov	r23, r22
 b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__floatsisf+0x5e>
 b30:	66 23       	and	r22, r22
 b32:	71 f0       	breq	.+28     	; 0xb50 <__floatsisf+0x74>
 b34:	96 e8       	ldi	r25, 0x86	; 134
 b36:	86 2f       	mov	r24, r22
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	60 e0       	ldi	r22, 0x00	; 0
 b3c:	2a f0       	brmi	.+10     	; 0xb48 <__floatsisf+0x6c>
 b3e:	9a 95       	dec	r25
 b40:	66 0f       	add	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	da f7       	brpl	.-10     	; 0xb3e <__floatsisf+0x62>
 b48:	88 0f       	add	r24, r24
 b4a:	96 95       	lsr	r25
 b4c:	87 95       	ror	r24
 b4e:	97 f9       	bld	r25, 7
 b50:	08 95       	ret

00000b52 <__fp_inf>:
 b52:	97 f9       	bld	r25, 7
 b54:	9f 67       	ori	r25, 0x7F	; 127
 b56:	80 e8       	ldi	r24, 0x80	; 128
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	60 e0       	ldi	r22, 0x00	; 0
 b5c:	08 95       	ret

00000b5e <__fp_nan>:
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	80 ec       	ldi	r24, 0xC0	; 192
 b62:	08 95       	ret

00000b64 <__fp_pscA>:
 b64:	00 24       	eor	r0, r0
 b66:	0a 94       	dec	r0
 b68:	16 16       	cp	r1, r22
 b6a:	17 06       	cpc	r1, r23
 b6c:	18 06       	cpc	r1, r24
 b6e:	09 06       	cpc	r0, r25
 b70:	08 95       	ret

00000b72 <__fp_pscB>:
 b72:	00 24       	eor	r0, r0
 b74:	0a 94       	dec	r0
 b76:	12 16       	cp	r1, r18
 b78:	13 06       	cpc	r1, r19
 b7a:	14 06       	cpc	r1, r20
 b7c:	05 06       	cpc	r0, r21
 b7e:	08 95       	ret

00000b80 <__fp_round>:
 b80:	09 2e       	mov	r0, r25
 b82:	03 94       	inc	r0
 b84:	00 0c       	add	r0, r0
 b86:	11 f4       	brne	.+4      	; 0xb8c <__fp_round+0xc>
 b88:	88 23       	and	r24, r24
 b8a:	52 f0       	brmi	.+20     	; 0xba0 <__fp_round+0x20>
 b8c:	bb 0f       	add	r27, r27
 b8e:	40 f4       	brcc	.+16     	; 0xba0 <__fp_round+0x20>
 b90:	bf 2b       	or	r27, r31
 b92:	11 f4       	brne	.+4      	; 0xb98 <__fp_round+0x18>
 b94:	60 ff       	sbrs	r22, 0
 b96:	04 c0       	rjmp	.+8      	; 0xba0 <__fp_round+0x20>
 b98:	6f 5f       	subi	r22, 0xFF	; 255
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	08 95       	ret

00000ba2 <__fp_split3>:
 ba2:	57 fd       	sbrc	r21, 7
 ba4:	90 58       	subi	r25, 0x80	; 128
 ba6:	44 0f       	add	r20, r20
 ba8:	55 1f       	adc	r21, r21
 baa:	59 f0       	breq	.+22     	; 0xbc2 <__fp_splitA+0x10>
 bac:	5f 3f       	cpi	r21, 0xFF	; 255
 bae:	71 f0       	breq	.+28     	; 0xbcc <__fp_splitA+0x1a>
 bb0:	47 95       	ror	r20

00000bb2 <__fp_splitA>:
 bb2:	88 0f       	add	r24, r24
 bb4:	97 fb       	bst	r25, 7
 bb6:	99 1f       	adc	r25, r25
 bb8:	61 f0       	breq	.+24     	; 0xbd2 <__fp_splitA+0x20>
 bba:	9f 3f       	cpi	r25, 0xFF	; 255
 bbc:	79 f0       	breq	.+30     	; 0xbdc <__fp_splitA+0x2a>
 bbe:	87 95       	ror	r24
 bc0:	08 95       	ret
 bc2:	12 16       	cp	r1, r18
 bc4:	13 06       	cpc	r1, r19
 bc6:	14 06       	cpc	r1, r20
 bc8:	55 1f       	adc	r21, r21
 bca:	f2 cf       	rjmp	.-28     	; 0xbb0 <__fp_split3+0xe>
 bcc:	46 95       	lsr	r20
 bce:	f1 df       	rcall	.-30     	; 0xbb2 <__fp_splitA>
 bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <__fp_splitA+0x30>
 bd2:	16 16       	cp	r1, r22
 bd4:	17 06       	cpc	r1, r23
 bd6:	18 06       	cpc	r1, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	f1 cf       	rjmp	.-30     	; 0xbbe <__fp_splitA+0xc>
 bdc:	86 95       	lsr	r24
 bde:	71 05       	cpc	r23, r1
 be0:	61 05       	cpc	r22, r1
 be2:	08 94       	sec
 be4:	08 95       	ret

00000be6 <__fp_zero>:
 be6:	e8 94       	clt

00000be8 <__fp_szero>:
 be8:	bb 27       	eor	r27, r27
 bea:	66 27       	eor	r22, r22
 bec:	77 27       	eor	r23, r23
 bee:	cb 01       	movw	r24, r22
 bf0:	97 f9       	bld	r25, 7
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
